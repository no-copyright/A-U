/* ==========================================================
   CODEBASE SNAPSHOT - 2025-07-19 09:15:22
   Project: app
   Files: 34 (34 text, 0 binary)
   Ignored Items: 1
   ========================================================== */

/* PROJECT STRUCTURE
   ------------------------------------------------------------
   .
   ├── Http/
   │   ├── Controllers/
   │   │   ├── KingExpressBus/
   │   │   │   ├── Admin/
   │   │   │   │   ├── AdminController.php
   │   │   │   │   ├── CategoryController.php
   │   │   │   │   ├── CustomerController.php
   │   │   │   │   ├── NewsController.php
   │   │   │   │   ├── TeacherController.php
   │   │   │   │   └── TrainingController.php
   │   │   │   └── Auth/
   │   │   │       └── AuthenticationController.php
   │   │   └── Controller.php
   │   ├── Middleware/
   │   │   ├── AuthenticationMiddleware.php
   │   │   └── CustomCKFinderAuth.php
   │   └── Traits/
   │       └── SlugGenerator.php
   ├── Mail/
   │   └── KingExpressBus/
   │       ├── AdminNewCustomerNotification.php
   │       ├── BookingConfirmMail.php
   │       └── CustomerRegistrationSuccess.php
   ├── Models/
   │   └── User.php
   ├── Providers/
   │   └── AppServiceProvider.php
   └── View/
       └── Components/
           ├── Inputs/
           │   ├── Date.php
           │   ├── Editor.php
           │   ├── EditorArray.php
           │   ├── Email.php
           │   ├── ImageLink.php
           │   ├── ImageLinkArray.php
           │   ├── Number.php
           │   ├── Price.php
           │   ├── Select.php
           │   ├── SelectMultiple.php
           │   ├── SelectSimple.php
           │   ├── Text.php
           │   ├── TextArea.php
           │   ├── TextAreaArray.php
           │   ├── TextArray.php
           │   └── Time.php
           └── Menus/
               ├── MenuBar.php
               └── MenuItem.php
   ------------------------------------------------------------ */

/* ===== Http\Controllers\Controller.php ===== */
<?php

namespace App\Http\Controllers;

abstract class Controller
{
    //
}


/* ===== Http\Controllers\KingExpressBus\Admin\AdminController.php ===== */
<?php

namespace App\Http\Controllers\KingExpressBus\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Validator;
use Illuminate\Http\JsonResponse;
use Throwable;

class AdminController extends Controller
{
    public function index()
    {
        $homePageData = DB::table('home_page')->first();

        if ($homePageData) {
            $homePageData->banners = json_decode($homePageData->banners, false) ?? (object)['title' => '', 'description' => '', 'images' => []];
            $homePageData->stats = json_decode($homePageData->stats, true) ?? [];
            $homePageData->fags = json_decode($homePageData->fags, true) ?? [];
            $homePageData->images = json_decode($homePageData->images, true) ?? [];
            $homePageData->link_youtubes = json_decode($homePageData->link_youtubes, true) ?? [];
        } else {
            $homePageData = (object) [
                'id' => null,
                'banners' => (object)['title' => '', 'description' => '', 'images' => []],
                'stats' => [],
                'fags' => [],
                'images' => [],
                'link_youtubes' => [],
            ];
        }

        return view('kingexpressbus.admin.modules.dashboard.edit', ['homePage' => $homePageData]);
    }

    public function update(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'banners.title' => 'nullable|string|max:255',
            'banners.description' => 'nullable|string',
            'banners.images' => 'nullable|array',
            'banners.images.*' => 'string|max:255',

            'stats' => 'nullable|array',
            'stats.*.value' => 'required|integer',
            'stats.*.description' => 'required|string|max:255',
            'stats.*.images' => 'required|string|max:255',

            'fags' => 'nullable|array',
            'fags.*.question' => 'required|string|max:255',
            'fags.*.answer' => 'required|string',

            'images' => 'nullable|array',
            'images.*' => 'string|max:255',

            'link_youtubes' => 'nullable|array',
            'link_youtubes.*' => 'string|max:255',
        ]);

        $validator->setAttributeNames([
            'stats.*.value' => 'giá trị thống kê',
            'stats.*.description' => 'mô tả thống kê',
            'stats.*.images' => 'ảnh thống kê',
            'fags.*.question' => 'câu hỏi',
            'fags.*.answer' => 'câu trả lời',
            'link_youtubes.*' => 'link youtube',
        ]);

        if ($validator->fails()) {
            return back()->withErrors($validator)->withInput();
        }

        try {
            $dataToUpdate = [
                'banners'       => json_encode($request->input('banners', ['title' => '', 'description' => '', 'images' => []])),
                'stats'         => json_encode($request->input('stats', [])),
                'fags'          => json_encode($request->input('fags', [])),
                'images'        => json_encode($request->input('images', [])),
                'link_youtubes' => json_encode($request->input('link_youtubes', [])),
                'updated_at'    => now()
            ];

            DB::table('home_page')->updateOrInsert(
                ['id' => 1],
                $dataToUpdate
            );
        } catch (Throwable $e) {
            Log::error("Error updating homepage: " . $e->getMessage());
            return back()->with('error', 'Đã xảy ra lỗi khi cập nhật trang chủ.')->withInput();
        }

        return redirect()->route('admin.dashboard.index')->with('success', 'Cập nhật thông tin trang chủ thành công!');
    }




    public function getHomePageApi(): JsonResponse
    {
        $homePage = DB::table('home_page')->first();

        if (!$homePage) {
            return response()->json([
                'success' => false,
                'message' => 'Homepage data not found.'
            ], 404);
        }

        $banners = json_decode($homePage->banners, false) ?? (object)['title' => '', 'description' => '', 'images' => []];
        $stats = json_decode($homePage->stats, true) ?? [];
        $images = json_decode($homePage->images, true) ?? [];


        if (!empty($banners->images) && is_array($banners->images)) {
            $banners->images = array_map(function ($path) {
                return url($path);
            }, $banners->images);
        }

        if (!empty($stats) && is_array($stats)) {
            $stats = array_map(function ($stat) {
                if (!empty($stat['images'])) {
                    $stat['images'] = url($stat['images']);
                }
                return $stat;
            }, $stats);
        }

        if (!empty($images) && is_array($images)) {
            $images = array_map(function ($path) {
                return url($path);
            }, $images);
        }

        $data = [
            'banners' => $banners,
            'stats' => $stats,
            'fags' => json_decode($homePage->fags, true) ?? [],
            'images' => $images,
            'link_youtubes' => json_decode($homePage->link_youtubes, true) ?? [],
        ];


        return response()->json([
            'success' => true,
            'data' => $data
        ]);
    }
}


/* ===== Http\Controllers\KingExpressBus\Admin\CategoryController.php ===== */
<?php

namespace App\Http\Controllers\KingExpressBus\Admin;

use App\Http\Controllers\Controller;
use App\Http\Traits\SlugGenerator; // <-- THÊM DÒNG NÀY
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\Rule;
use Illuminate\Support\Str;
use Illuminate\Http\JsonResponse;

class CategoryController extends Controller
{
    use SlugGenerator; // <-- THÊM DÒNG NÀY

    // ... (Các phương thức index, create, edit không thay đổi)
    public function index()
    {
        $categories = DB::table('categories')
            ->orderBy('name', 'asc')
            ->get();

        return view('kingexpressbus.admin.modules.categories.index', compact('categories'));
    }

    public function create()
    {
        $category = null;
        return view('kingexpressbus.admin.modules.categories.createOrEdit', compact('category'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'name' => 'required|max:255',
        ]);

        // Thêm các trường mặc định
        $validated['count'] = 0;
        $validated['created_at'] = now();
        $validated['updated_at'] = now();

        // === LOGIC TẠO SLUG MỚI (Đã thay đổi) ===
        // B1: Tạm thời tạo slug rỗng hoặc từ tên để insert trước
        $validated['slug'] = Str::slug($validated['name']);

        // B2: Thêm bản ghi vào DB để lấy ID
        $id = DB::table('categories')->insertGetId($validated);

        // B3: Tạo slug cuối cùng với ID và cập nhật lại bản ghi
        $finalSlug = $this->generateSlug($validated['name'], $id);
        DB::table('categories')->where('id', $id)->update(['slug' => $finalSlug]);
        // ===========================================

        return redirect()->route('admin.categories.index')->with('success', 'Danh mục đã được tạo thành công!');
    }

    public function edit(string $id)
    {
        $category = DB::table('categories')->find($id);
        if (!$category) {
            abort(404);
        }
        return view('kingexpressbus.admin.modules.categories.createOrEdit', compact('category'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        $category = DB::table('categories')->find($id);
        if (!$category) {
            abort(404);
        }

        $validated = $request->validate([
            'name' => [
                'required',
                'max:255',
                Rule::unique('categories')->ignore($id),
            ],
        ]);

        // === LOGIC CẬP NHẬT SLUG MỚI (Đã thay đổi) ===
        // Chỉ cập nhật slug nếu tên danh mục thay đổi
        if ($category->name !== $validated['name']) {
            $validated['slug'] = $this->generateSlug($validated['name'], $id);
        }
        // ===========================================

        $validated['updated_at'] = now();

        DB::table('categories')->where('id', $id)->update($validated);

        return redirect()->route('admin.categories.index')->with('success', 'Danh mục đã được cập nhật thành công!');
    }
    
    // ... (Phương thức destroy không thay đổi)
    public function destroy(string $id)
    {
        $category = DB::table('categories')->find($id);
        if (!$category) {
            return back()->with('error', 'Không tìm thấy danh mục để xóa.');
        }

        $newsCount = DB::table('news')->where('category_id', $id)->count();
        if ($newsCount > 0) {
            return back()->with('error', 'Không thể xóa danh mục này vì vẫn còn bài viết liên quan.');
        }

        DB::table('categories')->where('id', $id)->delete();

        return redirect()->route('admin.categories.index')->with('success', 'Danh mục đã được xóa thành công!');
    }

    public function getCategories(): JsonResponse
    {
        $categories = DB::table('categories')
            ->select('id', 'name', 'slug', 'count')
            ->orderBy('name', 'asc')
            ->get();

        return response()->json([
            'success' => true,
            'data' => $categories
        ]);
    }


        public function getNewsByCategorySlug(Request $request, string $categorySlug): JsonResponse
    {
        $category = DB::table('categories')->where('slug', $categorySlug)->first();
        
        if (!$category) {
            return response()->json([
                'success' => false,
                'message' => 'Category not found.'
            ], 404);
        }

        $pageSize = $request->query('pageSize', 10);

        // SỬA LẠI CÁC TRƯỜNG SELECT: Bỏ đi category_name và category_slug
        $paginator = DB::table('news')
            ->where('category_id', $category->id) // Lọc trực tiếp bằng category_id sẽ hiệu quả hơn
            ->select(
                'id',
                'title',
                'slug',
                'thumbnail',
                'author',
                'view',
                'created_at'
            )
            ->orderBy('created_at', 'desc')
            ->paginate($pageSize);

        $transformedNews = $paginator->getCollection()->map(function ($newsItem) {
            if (!empty($newsItem->thumbnail)) {
                $newsItem->thumbnail = url($newsItem->thumbnail);
            }
            return $newsItem;
        });
        
        return response()->json([
            'success' => true,
            'category' => [
                'id' => $category->id,
                'name' => $category->name,
                'slug' => $category->slug,
            ],
            'currentPage' => $paginator->currentPage(),
            'totalPages' => $paginator->lastPage(),
            'totalElements' => $paginator->total(),
            'pageSize' => $paginator->perPage(),
            'data' => $transformedNews,
        ]);
    }
}

/* ===== Http\Controllers\KingExpressBus\Admin\CustomerController.php ===== */
<?php

namespace App\Http\Controllers\KingExpressBus\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Log;
use Throwable;

use Illuminate\Support\Facades\Mail;
use App\Mail\KingExpressBus\CustomerRegistrationSuccess;
use App\Mail\KingExpressBus\AdminNewCustomerNotification;

class CustomerController extends Controller
{
    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $customers = DB::table('customers')
            ->leftJoin('trainings', 'customers.training_id', '=', 'trainings.id')
            ->select('customers.id', 'customers.full_name_parent', 'customers.phone', 'customers.full_name_children', 'customers.created_at', 'trainings.title as training_title')
            ->orderBy('customers.created_at', 'desc')
            ->get();

        return view('kingexpressbus.admin.modules.customers.index', compact('customers'));
    }

    /**
     * Display the specified resource.
     * HÀM MỚI ĐƯỢC THÊM VÀO
     */
    public function show(string $id)
    {
        $customer = DB::table('customers')
            ->leftJoin('trainings', 'customers.training_id', '=', 'trainings.id')
            ->select('customers.*', 'trainings.title as training_title')
            ->where('customers.id', $id)
            ->firstOrFail(); // Dùng firstOrFail để tự động báo lỗi 404 nếu không tìm thấy

        return view('kingexpressbus.admin.modules.customers.show', compact('customer'));
    }


    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        $customer = DB::table('customers')->find($id);
        if (!$customer) {
            return back()->with('error', 'Không tìm thấy khách hàng để xóa.');
        }

        DB::table('customers')->where('id', $id)->delete();

        return redirect()->route('admin.customers.index')->with('success', 'Thông tin khách hàng đã được xóa thành công!');
    }


    public function store(Request $request): JsonResponse
    {
        $validator = Validator::make($request->all(), [
            'training_id' => 'nullable|exists:trainings,id',
            'full_name_parent' => 'required|string|max:255',
            'phone' => ['required', 'string', 'regex:/^(0\d{9})$/'],
            'email' => 'required|email|max:50',
            'full_name_children' => 'required|string|max:255',
            'date_of_birth' => 'required|date_format:Y-m-d',
            'address' => 'required|string',
            'note' => 'nullable|string',
        ]);

        $validator->setAttributeNames([
            'training_id' => 'khóa học',
            'full_name_parent' => 'họ tên phụ huynh',
            'phone' => 'số điện thoại',
            'full_name_children' => 'họ tên học viên',
            'date_of_birth' => 'ngày sinh',
            'address' => 'địa chỉ',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'success' => false,
                'message' => 'Dữ liệu không hợp lệ.',
                'errors' => $validator->errors()
            ], 422);
        }
        
        $validatedData = $validator->validated();
        $validatedData['created_at'] = now();
        $validatedData['updated_at'] = now();

        try {
            $customerId = DB::table('customers')->insertGetId($validatedData);
            
            // === BẮT ĐẦU LOGIC GỬI EMAIL ===
            
            // Lấy thêm tên khóa học để hiển thị trong email
            if (!empty($validatedData['training_id'])) {
                $training = DB::table('trainings')->find($validatedData['training_id']);
                $validatedData['training_title'] = $training ? $training->title : 'Chưa chọn';
            }

            // Gửi email trong một khối try-catch riêng để không ảnh hưởng đến response của API
            try {
                // 1. Gửi email cho khách hàng
                Mail::to($validatedData['email'])->send(new CustomerRegistrationSuccess($validatedData));

                // 2. Gửi email cho admin (lấy từ file .env)
                $adminEmail = env('ADMIN_EMAIL_RECIPIENT', config('mail.from.address'));
                if ($adminEmail) {
                    Mail::to($adminEmail)->send(new AdminNewCustomerNotification($validatedData));
                }
            } catch (Throwable $e) {
                // Nếu gửi mail lỗi, chỉ ghi log chứ không báo lỗi cho người dùng
                Log::error('Failed to send registration emails for customer ID ' . $customerId . ': ' . $e->getMessage());
            }

            // === KẾT THÚC LOGIC GỬI EMAIL ===

        } catch (Throwable $e) {
            Log::error('API Customer Store Error: ' . $e->getMessage());
            return response()->json([
                'success' => false,
                'message' => 'Đã có lỗi xảy ra, không thể lưu thông tin.'
            ], 500);
        }

        return response()->json([
            'success' => true,
            'message' => 'Đăng ký thông tin thành công!',
            'data' => [
                'customer_id' => $customerId
            ]
        ], 201);
    }
}


/* ===== Http\Controllers\KingExpressBus\Admin\NewsController.php ===== */
<?php

namespace App\Http\Controllers\KingExpressBus\Admin;

use App\Http\Controllers\Controller;
use App\Http\Traits\SlugGenerator; // <-- BƯỚC 1: Thêm Trait đã tạo
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use Throwable;
use Illuminate\Http\JsonResponse;

class NewsController extends Controller
{
    use SlugGenerator; // <-- BƯỚC 2: Sử dụng Trait trong Controller

    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $newsItems = DB::table('news')
            ->leftJoin('categories', 'news.category_id', '=', 'categories.id')
            ->select('news.*', 'categories.name as category_name')
            ->orderBy('news.created_at', 'desc')
            ->get();

        return view('kingexpressbus.admin.modules.news.index', compact('newsItems'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $news = null;
        $categories = DB::table('categories')->orderBy('name', 'asc')->get();
        return view('kingexpressbus.admin.modules.news.createOrEdit', compact('news', 'categories'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'title' => 'required|string|max:255,title',
            'thumbnail' => 'required|string|max:255',
            'author' => 'required|string|max:255',
            'category_id' => 'required|exists:categories,id',
            'content' => 'required|string',
        ]);

        try {
            DB::transaction(function () use ($validated) {
                $validated['created_at'] = now();
                $validated['updated_at'] = now();

                // === LOGIC TẠO SLUG MỚI (Đã thay đổi) ===
                // 1. Tạm thời tạo slug rỗng hoặc từ title để insert trước
                $validated['slug'] = Str::slug($validated['title']);

                // 2. Thêm tin tức vào DB để lấy về ID
                $id = DB::table('news')->insertGetId($validated);

                // 3. Tạo slug cuối cùng với ID và cập nhật lại bản ghi
                $finalSlug = $this->generateSlug($validated['title'], $id);
                DB::table('news')->where('id', $id)->update(['slug' => $finalSlug]);
                // ===========================================

                // Cập nhật số lượng bài viết trong danh mục tương ứng
                DB::table('categories')->where('id', $validated['category_id'])->increment('count');
            });
        } catch (Throwable $e) {
            // Nếu có lỗi, quay lại với thông báo lỗi
            return back()->with('error', 'Đã xảy ra lỗi khi tạo tin tức: ' . $e->getMessage())->withInput();
        }

        return redirect()->route('admin.news.index')->with('success', 'Tin tức đã được tạo thành công!');
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        $news = DB::table('news')->find($id);
        if (!$news) {
            abort(404);
        }
        $categories = DB::table('categories')->orderBy('name', 'asc')->get();
        return view('kingexpressbus.admin.modules.news.createOrEdit', compact('news', 'categories'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        $news = DB::table('news')->find($id);
        if (!$news) {
            abort(404);
        }
        
        $old_category_id = $news->category_id;

        $validated = $request->validate([
            'title' => 'required|string|max:255|unique:news,title,' . $id, // Thêm unique và ignore id hiện tại
            'thumbnail' => 'required|string|max:255',
            'author' => 'required|string|max:255',
            'category_id' => 'required|exists:categories,id',
            'content' => 'required|string',
        ]);
        
        try {
            DB::transaction(function () use ($validated, $news, $id, $old_category_id) {
                // === LOGIC CẬP NHẬT SLUG MỚI (Đã thay đổi) ===
                // Chỉ cập nhật slug nếu tiêu đề thay đổi
                if ($news->title !== $validated['title']) {
                    $validated['slug'] = $this->generateSlug($validated['title'], $id);
                }
                // ===========================================

                $validated['updated_at'] = now();

                // 1. Cập nhật bảng 'news'
                DB::table('news')->where('id', $id)->update($validated);

                // 2. Cập nhật số lượng nếu danh mục thay đổi
                if ($old_category_id != $validated['category_id']) {
                    // Giảm count của danh mục cũ (nếu nó vẫn tồn tại)
                    DB::table('categories')->where('id', $old_category_id)->decrement('count');
                    // Tăng count của danh mục mới
                    DB::table('categories')->where('id', $validated['category_id'])->increment('count');
                }
            });
        } catch (Throwable $e) {
            return back()->with('error', 'Đã xảy ra lỗi khi cập nhật tin tức: ' . $e->getMessage())->withInput();
        }

        return redirect()->route('admin.news.index')->with('success', 'Tin tức đã được cập nhật thành công!');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        $news = DB::table('news')->find($id);
        if (!$news) {
            return back()->with('error', 'Không tìm thấy tin tức để xóa.');
        }

        try {
            DB::transaction(function () use ($news, $id) {
                // 1. Xóa tin tức khỏi bảng 'news'
                DB::table('news')->where('id', $id)->delete();

                // 2. Giảm số lượng trong bảng 'categories'
                // Đảm bảo rằng count không bao giờ âm
                DB::table('categories')->where('id', $news->category_id)->where('count', '>', 0)->decrement('count');
            });
        } catch (Throwable $e) {
            return back()->with('error', 'Đã xảy ra lỗi khi xóa tin tức: ' . $e->getMessage());
        }

        return redirect()->route('admin.news.index')->with('success', 'Tin tức đã được xóa thành công!');
    }


    public function getNewsList(Request $request): JsonResponse
    {
        // Bạn có thể tùy chỉnh số lượng item mỗi trang ở đây
        $pageSize = $request->query('pageSize', 10); 

        // Sử dụng paginate() của Laravel để tự động xử lý phân trang
        $paginator = DB::table('news')
            ->join('categories', 'news.category_id', '=', 'categories.id')
            ->select(
                'news.id',
                'news.title',
                'news.slug',
                'news.thumbnail',
                'news.author',
                'news.view',
                'news.created_at',
                'categories.name as category_name',
                'categories.slug as category_slug'
            )
            ->orderBy('news.created_at', 'desc')
            ->paginate($pageSize);
            
        // Chuyển đổi collection data để có URL đầy đủ cho thumbnail
        $transformedNews = $paginator->getCollection()->map(function ($newsItem) {
            if (!empty($newsItem->thumbnail)) {
                $newsItem->thumbnail = url($newsItem->thumbnail);
            }
            return $newsItem;
        });

        // Xây dựng cấu trúc response cuối cùng theo đúng yêu cầu
        return response()->json([
            'success' => true,
            'currentPage' => $paginator->currentPage(),
            'totalPages' => $paginator->lastPage(),
            'totalElements' => $paginator->total(),
            'pageSize' => $paginator->perPage(),
            'data' => $transformedNews,
        ]);
    }



    public function getNewsDetailBySlug(string $slug): JsonResponse
    {
        // Tìm bài viết theo slug
        $news = DB::table('news')
            ->join('categories', 'news.category_id', '=', 'categories.id')
            ->select(
                'news.id',
                'news.title',
                'news.slug',
                'news.thumbnail',
                'news.author',
                'news.view',
                'news.content', // Lấy thêm trường nội dung
                'news.created_at',
                'news.updated_at',
                'categories.name as category_name',
                'categories.slug as category_slug'
            )
            ->where('news.slug', $slug)
            ->first();

        // Nếu không tìm thấy, trả về lỗi 404
        if (!$news) {
            return response()->json([
                'success' => false,
                'message' => 'News not found.'
            ], 404);
        }

        // Tăng lượt xem (view count) của bài viết lên 1
        DB::table('news')->where('id', $news->id)->increment('view');

        // Cập nhật lại số view trong đối tượng trả về
        $news->view += 1;
        
        // Chuyển đổi URL cho thumbnail
        if (!empty($news->thumbnail)) {
            $news->thumbnail = url($news->thumbnail);
        }

        // Trả về dữ liệu chi tiết
        return response()->json([
            'success' => true,
            'data' => $news
        ]);
    }
}

/* ===== Http\Controllers\KingExpressBus\Admin\TeacherController.php ===== */
<?php

namespace App\Http\Controllers\KingExpressBus\Admin;

use App\Http\Controllers\Controller;
use App\Http\Traits\SlugGenerator; // <-- THÊM DÒNG NÀY
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Validation\Rule;
use Illuminate\Support\Str;
use Illuminate\Http\JsonResponse;

class TeacherController extends Controller
{
    use SlugGenerator; // <-- SỬ DỤNG TRAIT

    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $teachers = DB::table('teachers')->orderBy('full_name', 'asc')->get();
        return view('kingexpressbus.admin.modules.teachers.index', compact('teachers'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $teacher = null;
        return view('kingexpressbus.admin.modules.teachers.createOrEdit', compact('teacher'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'full_name' => 'required|string|max:255,full_name',
            'role' => 'required|string|max:255',
            'qualifications' => 'required|string',
            'avatar' => 'required|string|max:255',
            'facebook' => 'required|string|max:255',
            'email' => 'required|email|unique:teachers,email|max:50',
            'description' => 'nullable|string',
        ]);
        
        $validated['created_at'] = now();
        $validated['updated_at'] = now();

        // === LOGIC TẠO SLUG MỚI (Đã thay đổi) ===
        // 1. Tạo slug tạm
        $validated['slug'] = Str::slug($validated['full_name']);
        
        // 2. Insert để lấy ID
        $id = DB::table('teachers')->insertGetId($validated);
        
        // 3. Tạo slug cuối cùng và update
        $finalSlug = $this->generateSlug($validated['full_name'], $id);
        DB::table('teachers')->where('id', $id)->update(['slug' => $finalSlug]);
        // ===========================================

        return redirect()->route('admin.teachers.index')->with('success', 'Giáo viên đã được thêm thành công!');
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        $teacher = DB::table('teachers')->find($id);
        if (!$teacher) {
            abort(404);
        }
        return view('kingexpressbus.admin.modules.teachers.createOrEdit', compact('teacher'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        $teacher = DB::table('teachers')->find($id);
        if (!$teacher) {
            abort(404);
        }

        $validated = $request->validate([
            'full_name' => 'required|string|max:255|unique:teachers,full_name,' . $id,
            'role' => 'required|string|max:255',
            'qualifications' => 'required|string',
            'avatar' => 'required|string|max:255',
            'facebook' => 'required|string|max:255',
            'email' => [
                'required',
                'email',
                'max:50',
                Rule::unique('teachers')->ignore($id),
            ],
            'description' => 'nullable|string',
        ]);

        // === LOGIC CẬP NHẬT SLUG MỚI (Đã thay đổi) ===
        if ($teacher->full_name !== $validated['full_name']) {
            $validated['slug'] = $this->generateSlug($validated['full_name'], $id);
        }
        // ===========================================

        $validated['updated_at'] = now();

        DB::table('teachers')->where('id', $id)->update($validated);

        return redirect()->route('admin.teachers.index')->with('success', 'Thông tin giáo viên đã được cập nhật thành công!');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        $teacher = DB::table('teachers')->find($id);
        if (!$teacher) {
            return back()->with('error', 'Không tìm thấy giáo viên để xóa.');
        }

        DB::table('teachers')->where('id', $id)->delete();

        return redirect()->route('admin.teachers.index')->with('success', 'Thông tin giáo viên đã được xóa thành công!');
    }

    public function getTeacherListApi(Request $request): JsonResponse
    {
        $pageSize = $request->query('pageSize', 10);

        $paginator = DB::table('teachers')
            ->select('id', 'full_name', 'slug', 'role', 'qualifications', 'avatar')
            ->orderBy('full_name', 'asc')
            ->paginate($pageSize);
        
        $transformedData = $paginator->getCollection()->map(function ($teacher) {
            // Chuyển đổi URL avatar
            if (!empty($teacher->avatar)) {
                $teacher->avatar = url($teacher->avatar);
            }
            
            // SỬA LẠI TRƯỜNG QUALIFICATIONS
            if (!empty($teacher->qualifications)) {
                // Tách chuỗi bằng dấu ',', sau đó xóa khoảng trắng thừa ở mỗi phần tử
                $teacher->qualifications = array_map('trim', explode(',', $teacher->qualifications));
            } else {
                // Nếu trường này rỗng, trả về một mảng trống
                $teacher->qualifications = [];
            }

            return $teacher;
        });

        return response()->json([
            'success' => true,
            'currentPage' => $paginator->currentPage(),
            'totalPages' => $paginator->lastPage(),
            'totalElements' => $paginator->total(),
            'pageSize' => $paginator->perPage(),
            'data' => $transformedData,
        ]);
    }

    /**
     * API: Lấy thông tin chi tiết của một giáo viên theo slug.
     */
    public function getTeacherDetailApi(string $slug): JsonResponse
    {
        $teacher = DB::table('teachers')->where('slug', $slug)->first();

        if (!$teacher) {
            return response()->json(['success' => false, 'message' => 'Teacher not found.'], 404);
        }
        
        // Chuyển đổi URL avatar
        if (!empty($teacher->avatar)) {
            $teacher->avatar = url($teacher->avatar);
        }

        // SỬA LẠI TRƯỜNG QUALIFICATIONS
        if (!empty($teacher->qualifications)) {
            $teacher->qualifications = array_map('trim', explode(',', $teacher->qualifications));
        } else {
            $teacher->qualifications = [];
        }

        return response()->json(['success' => true, 'data' => $teacher]);
    }
}

/* ===== Http\Controllers\KingExpressBus\Admin\TrainingController.php ===== */
<?php

namespace App\Http\Controllers\KingExpressBus\Admin;

use App\Http\Controllers\Controller;
use App\Http\Traits\SlugGenerator; // <-- THÊM DÒNG NÀY
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use Illuminate\Http\JsonResponse;

class TrainingController extends Controller
{
    use SlugGenerator; // <-- SỬ DỤNG TRAIT

    /**
     * Display a listing of the resource.
     */
    public function index()
    {
        $trainings = DB::table('trainings')->orderBy('title', 'asc')->get();
        return view('kingexpressbus.admin.modules.training.index', compact('trainings'));
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create()
    {
        $training = null;
        return view('kingexpressbus.admin.modules.training.createOrEdit', compact('training'));
    }

    /**
     * Store a newly created resource in storage.
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'title' => 'required|string|max:255,title',
            'age' => 'required|string|max:255',
            'description' => 'required|string',
            'thumbnail' => 'required|string|max:255',
            'duration' => 'required|string|max:255',
            'outcome' => 'required|string',
            'method' => 'required|string|max:255',
            'speaking' => 'required|string',
            'listening' => 'required|string',
            'reading' => 'required|string',
            'writing' => 'required|string',
            'curriculum' => 'nullable|string',
        ]);

        $validated['created_at'] = now();
        $validated['updated_at'] = now();
        
        // === LOGIC TẠO SLUG MỚI (Đã thay đổi) ===
        // 1. Tạo slug tạm
        $validated['slug'] = Str::slug($validated['title']);
        
        // 2. Insert để lấy ID
        $id = DB::table('trainings')->insertGetId($validated);
        
        // 3. Tạo slug cuối cùng và update
        $finalSlug = $this->generateSlug($validated['title'], $id);
        DB::table('trainings')->where('id', $id)->update(['slug' => $finalSlug]);
        // ===========================================

        return redirect()->route('admin.training.index')->with('success', 'Khoá đào tạo đã được tạo thành công!');
    }

    /**
     * Show the form for editing the specified resource.
     */
    public function edit(string $id)
    {
        $training = DB::table('trainings')->find($id);
        if (!$training) {
            abort(404);
        }
        return view('kingexpressbus.admin.modules.training.createOrEdit', compact('training'));
    }

    /**
     * Update the specified resource in storage.
     */
    public function update(Request $request, string $id)
    {
        $training = DB::table('trainings')->find($id);
        if (!$training) {
            abort(404);
        }

        $validated = $request->validate([
            'title' => 'required|string|max:255|unique:trainings,title,' . $id,
            'age' => 'required|string|max:255',
            'description' => 'required|string',
            'thumbnail' => 'required|string|max:255',
            'duration' => 'required|string|max:255',
            'outcome' => 'required|string',
            'method' => 'required|string|max:255',
            'speaking' => 'required|string',
            'listening' => 'required|string',
            'reading' => 'required|string',
            'writing' => 'required|string',
            'curriculum' => 'nullable|string',
        ]);

        // === LOGIC CẬP NHẬT SLUG MỚI (Đã thay đổi) ===
        if ($training->title !== $validated['title']) {
            $validated['slug'] = $this->generateSlug($validated['title'], $id);
        }
        // ===========================================

        $validated['updated_at'] = now();

        DB::table('trainings')->where('id', $id)->update($validated);

        return redirect()->route('admin.training.index')->with('success', 'Khoá đào tạo đã được cập nhật thành công!');
    }

    /**
     * Remove the specified resource from storage.
     */
    public function destroy(string $id)
    {
        $training = DB::table('trainings')->find($id);
        if (!$training) {
            return back()->with('error', 'Không tìm thấy khoá đào tạo để xóa.');
        }

        $customerCount = DB::table('customers')->where('training_id', $id)->count();
        if ($customerCount > 0) {
            return back()->with('error', 'Không thể xóa khoá đào tạo này vì có khách hàng đã đăng ký.');
        }

        DB::table('trainings')->where('id', $id)->delete();

        return redirect()->route('admin.training.index')->with('success', 'Khoá đào tạo đã được xóa thành công!');
    }


    public function getTrainingListApi(Request $request): JsonResponse
    {
        $pageSize = $request->query('pageSize', 10);

        $paginator = DB::table('trainings')
            ->select('id', 'title', 'slug', 'age', 'description', 'thumbnail', 'duration')
            ->orderBy('title', 'asc')
            ->paginate($pageSize);
        
        $transformedData = $paginator->getCollection()->map(function ($training) {
            if (!empty($training->thumbnail)) {
                $training->thumbnail = url($training->thumbnail);
            }
            return $training;
        });

        return response()->json([
            'success' => true,
            'currentPage' => $paginator->currentPage(),
            'totalPages' => $paginator->lastPage(),
            'totalElements' => $paginator->total(),
            'pageSize' => $paginator->perPage(),
            'data' => $transformedData,
        ]);
    }

    /**
     * API: Lấy thông tin chi tiết của một khoá đào tạo theo slug.
     */
    public function getTrainingDetailApi(string $slug): JsonResponse
    {
        $training = DB::table('trainings')->where('slug', $slug)->first();

        if (!$training) {
            return response()->json(['success' => false, 'message' => 'Training not found.'], 404);
        }
        
        // Chuyển đổi URL thumbnail
        if (!empty($training->thumbnail)) {
            $training->thumbnail = url($training->thumbnail);
        }

        // Decode các trường JSON nếu có (ví dụ: curriculum)
        // Trong schema hiện tại, các trường này là text, nếu bạn đổi sang JSON, hãy bỏ comment
        // $training->curriculum = json_decode($training->curriculum, true);

        return response()->json(['success' => true, 'data' => $training]);
    }
}

/* ===== Http\Controllers\KingExpressBus\Auth\AuthenticationController.php ===== */
<?php

namespace App\Http\Controllers\KingExpressBus\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;

class AuthenticationController extends Controller
{
    public function login()
    {
        return view('kingexpressbus.auth.login');
    }

    public function logout()
    {
        Auth::logout();
        return to_route('admin.login');
    }


    public function authenticate(Request $request): RedirectResponse
    {
        $credentials = $request->validate([
            'email' => 'required|email',
            'password' => 'required',
        ]);

        $remember = $request->remember != null;

        if (Auth::attempt($credentials, $remember)) {
            $request->session()->regenerate();
            return to_route("admin.dashboard.index");
        }

        return back()->withErrors([
            'error' => 'Đăng nhập thất bại',
        ])->onlyInput('email');
    }
}


/* ===== Http\Middleware\AuthenticationMiddleware.php ===== */
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class AuthenticationMiddleware
{
    public function handle(Request $request, Closure $next): Response
    {
        if (!Auth::check()) {
            return to_route('admin.login');
        }
        return $next($request);
    }
}


/* ===== Http\Middleware\CustomCKFinderAuth.php ===== */
<?php

namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\Response;

class CustomCKFinderAuth
{
    /**
     * Handle an incoming request.
     *
     * @param \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response) $next
     */
    public function handle($request, Closure $next)
    {
        config(['ckfinder.authentication' => function () {
            return true;
        }]);
        return $next($request);
    }
}


/* ===== Http\Traits\SlugGenerator.php ===== */
<?php

namespace App\Http\Traits;

use Illuminate\Support\Str;

/**
 * Trait này cung cấp một phương thức chung để tạo slug duy nhất bằng cách nối ID vào cuối.
 * Cấu trúc slug sẽ là: `ten-bai-viet-123`
 */
trait SlugGenerator
{
    /**
     * Tạo một slug duy nhất từ chuỗi nguồn và ID.
     *
     * @param string $sourceString Chuỗi để tạo slug (ví dụ: title, name).
     * @param int|string $id ID của bản ghi.
     * @return string Slug đã được tạo.
     */
    protected function generateSlug(string $sourceString, $id): string
    {
        $baseSlug = Str::slug($sourceString);
        return $baseSlug . '-' . $id;
    }
}

/* ===== Mail\KingExpressBus\AdminNewCustomerNotification.php ===== */
<?php

namespace App\Mail\KingExpressBus;

use Illuminate\Bus\Queueable;
use Illuminate\Mail\Mailable;
use Illuminate\Mail\Mailables\Content;
use Illuminate\Mail\Mailables\Envelope;
use Illuminate\Queue\SerializesModels;

class AdminNewCustomerNotification extends Mailable
{
    use Queueable, SerializesModels;

    public array $customerData;

    /**
     * Create a new message instance.
     */
    public function __construct(array $customerData)
    {
        $this->customerData = $customerData;
    }

    /**
     * Get the message envelope.
     */
    public function envelope(): Envelope
    {
        return new Envelope(
            subject: 'Thông Báo: Có Khách Hàng Mới Đăng Ký Tư Vấn',
        );
    }

    /**
     * Get the message content definition.
     */
    public function content(): Content
    {
        return new Content(
            view: 'kingexpressbus.mail.admin_new_customer_notification',
        );
    }

    /**
     * Get the attachments for the message.
     */
    public function attachments(): array
    {
        return [];
    }
}

/* ===== Mail\KingExpressBus\BookingConfirmMail.php ===== */
<?php

namespace App\Mail\KingExpressBus;

use Illuminate\Bus\Queueable;
use Illuminate\Contracts\Queue\ShouldQueue;

// Implement ShouldQueue để gửi mail qua hàng đợi (nên dùng)
use Illuminate\Mail\Mailable;
use Illuminate\Mail\Mailables\Content;
use Illuminate\Mail\Mailables\Envelope;
use Illuminate\Queue\SerializesModels;
use Illuminate\Support\Facades\Log;

// Để ghi log nếu cần

// implements ShouldQueue // Bỏ comment dòng này nếu bạn muốn sử dụng Queue
class BookingConfirmMail extends Mailable
{
    use Queueable, SerializesModels;

    /**
     * Dữ liệu chi tiết đặt vé sẽ được truyền vào view.
     * Thuộc tính public sẽ tự động có sẵn trong view.
     *
     * @var array
     */
    public array $bookingDetails;

    /**
     * Create a new message instance.
     *
     * @param array $bookingDetails Mảng chứa thông tin chi tiết đặt vé.
     */
    public function __construct(array $bookingDetails)
    {
        $this->bookingDetails = $bookingDetails;
        Log::info('BookingConfirmMail created with details:', $bookingDetails); // Ghi log để debug (tùy chọn)
    }

    /**
     * Get the message envelope.
     * Thiết lập người nhận, tiêu đề email.
     */
    public function envelope(): Envelope
    {
        // Tạo tiêu đề email động hơn
        $subject = sprintf(
            'Xác nhận đặt vé #%s - %s đi %s ngày %s',
            $this->bookingDetails['booking_id'] ?? 'Mới', // Lấy booking_id nếu có
            $this->bookingDetails['start_province'] ?? 'N/A',
            $this->bookingDetails['end_province'] ?? 'N/A',
            $this->bookingDetails['departure_date'] ?? 'N/A'
        );

        return new Envelope(
        // Có thể thêm from() nếu muốn chỉ định người gửi cụ thể
        // from: new Address('noreply@kingexpressbus.com', 'King Express Bus'),
            subject: $subject,
        );
    }

    /**
     * Get the message content definition.
     * Chỉ định view và truyền dữ liệu vào view.
     */
    public function content(): Content
    {
        return new Content(
            view: 'kingexpressbus.mail.booking_confirm',
        // Không cần dùng with() vì $bookingDetails là public property
        // with: [
        //     'details' => $this->bookingDetails, // Truyền dữ liệu vào view với tên biến 'details'
        // ],
        );
    }

    /**
     * Get the attachments for the message.
     *
     * @return array<int, \Illuminate\Mail\Mailables\Attachment>
     */
    public function attachments(): array
    {
        // Trả về mảng rỗng nếu không có file đính kèm
        return [];
        // Ví dụ đính kèm file PDF vé điện tử (nếu có):
        // return [
        //     Attachment::fromPath('/path/to/your/eticket.pdf')
        //         ->as('VeDienTu-' . $this->bookingDetails['booking_id'] . '.pdf')
        //         ->withMime('application/pdf'),
        // ];
    }
}


/* ===== Mail\KingExpressBus\CustomerRegistrationSuccess.php ===== */
<?php

namespace App\Mail\KingExpressBus;

use Illuminate\Bus\Queueable;
use Illuminate\Mail\Mailable;
use Illuminate\Mail\Mailables\Content;
use Illuminate\Mail\Mailables\Envelope;
use Illuminate\Queue\SerializesModels;

class CustomerRegistrationSuccess extends Mailable
{
    use Queueable, SerializesModels;

    public array $customerData;

    /**
     * Create a new message instance.
     */
    public function __construct(array $customerData)
    {
        $this->customerData = $customerData;
    }

    /**
     * Get the message envelope.
     */
    public function envelope(): Envelope
    {
        return new Envelope(
            subject: 'Xác Nhận Đăng Ký Tư Vấn Thành Công',
        );
    }

    /**
     * Get the message content definition.
     */
    public function content(): Content
    {
        return new Content(
            view: 'kingexpressbus.mail.customer_registration_success',
        );
    }

    /**
     * Get the attachments for the message.
     */
    public function attachments(): array
    {
        return [];
    }
}

/* ===== Models\User.php ===== */
<?php

namespace App\Models;

// use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{
    /** @use HasFactory<\Database\Factories\UserFactory> */
    use HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var list<string>
     */
    protected $fillable = [
        'name',
        'email',
        'password',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var list<string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }
}


/* ===== Providers\AppServiceProvider.php ===== */
<?php

namespace App\Providers;

use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\View;
use Illuminate\Support\ServiceProvider;
use Illuminate\Support\Collection;

// Thêm Collection để làm việc với kết quả DB dễ dàng hơn

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     *
     * Trong phương thức boot, chúng ta lấy dữ liệu chung cần thiết cho các view
     * và chia sẻ chúng bằng View::share().
     */
    public function boot(): void
    {
        // Chia sẻ thông tin website chung (web_info)
        try {
            // Lấy bản ghi đầu tiên từ bảng web_info
            $webInfo = DB::table('web_info')->first();
            // Chia sẻ biến $webInfoGlobal với tất cả các view
            View::share('webInfoGlobal', $webInfo);
        } catch (\Exception $e) {
            // Xử lý trường hợp có lỗi (ví dụ: chưa chạy migration, lỗi kết nối DB)
            // Ghi log lỗi nếu cần: Log::error("Error fetching web_info: " . $e->getMessage());
            View::share('webInfoGlobal', null); // Chia sẻ giá trị null nếu có lỗi
        }


        // --- Lấy và xử lý dữ liệu Menu cho Client Header ---
        try {
            // Lấy tất cả các menu, sắp xếp theo độ ưu tiên và tên
            $allMenus = DB::table('menus')
                ->orderBy('priority', 'asc')
                ->orderBy('name', 'asc')
                ->get(); // Lấy dữ liệu dưới dạng Collection

            // Xây dựng cấu trúc cây menu từ danh sách menu phẳng
            $clientMenuTree = $this->buildMenuTree($allMenus);

            // Chia sẻ cấu trúc cây menu ($clientMenuTree) với tất cả các view
            // dưới tên biến là 'clientMenuTreeGlobal'
            View::share('clientMenuTreeGlobal', $clientMenuTree);

        } catch (\Exception $e) {
            // Xử lý trường hợp có lỗi khi lấy dữ liệu menu
            // Ghi log lỗi nếu cần: Log::error("Error fetching menus: " . $e->getMessage());
            View::share('clientMenuTreeGlobal', collect()); // Chia sẻ một Collection rỗng nếu có lỗi
        }
        // --- Kết thúc xử lý Menu ---

    }

    /**
     * Helper function to build the menu tree recursively.
     * Hàm này xây dựng cấu trúc cây từ danh sách menu phẳng.
     * Nó nhận vào một Collection các menu và ID của menu cha.
     * Nó trả về một Collection chứa các menu con trực tiếp, mỗi menu con
     * lại có thuộc tính 'children' chứa Collection các menu con của nó.
     *
     * @param Collection $elements Danh sách tất cả các menu từ DB (dạng Collection).
     * @param int|null $parentId ID của menu cha cần tìm con (null cho menu gốc).
     * @return Collection Cấu trúc cây menu (Collection các object menu, mỗi object có thể có 'children').
     */
    private function buildMenuTree(Collection $elements, $parentId = null): Collection
    {
        // Tạo một Collection rỗng để chứa các menu con tìm được ở cấp này
        $branch = collect();

        // Lọc ra các menu có parent_id khớp với $parentId được truyền vào
        // Sử dụng phương thức `where` của Collection
        $children = $elements->where('parent_id', $parentId);

        // Lặp qua từng menu con vừa lọc được
        foreach ($children as $child) {
            // Đệ quy: Gọi lại hàm buildMenuTree để tìm các menu con của menu $child hiện tại
            // Kết quả (là một Collection các menu con) được gán vào thuộc tính 'children' của $child
            $child->children = $this->buildMenuTree($elements, $child->id);

            // Thêm menu $child (đã có thuộc tính 'children') vào Collection $branch
            $branch->push($child);
        }

        // Trả về Collection chứa các menu con ở cấp hiện tại
        return $branch;
    }
}


/* ===== View\Components\Inputs\Date.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class Date extends Component
{
    public string $label;
    public string $name;
    public string $value;

    public function __construct($label, $name, $value = null)
    {
        $this->label = $label;
        $this->name = $name;
        $this->value = $value != null ? $value : "";
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.inputs.date');
    }
}


/* ===== View\Components\Inputs\Editor.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class Editor extends Component
{
    public string $label;
    public string $name;
    public string $value;

    public function __construct($label, $name, $value = null)
    {
        $this->label = $label;
        $this->name = $name;
        $this->value = $value != null ? $value : "";
    }

    public function render(): View|Closure|string
    {
        return view('components.inputs.editor');
    }
}


/* ===== View\Components\Inputs\EditorArray.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class EditorArray extends Component
{
    public string $label;
    public string $name;
    public $value;

    public function __construct($label, $name, $value = [])
    {
        $this->label = $label;
        $this->name = $name;
        $this->value = $value ?: [];
    }

    public function render(): View|Closure|string
    {
        return view('components.inputs.editor-array');
    }
}


/* ===== View\Components\Inputs\Email.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class Email extends Component
{
    public string $label;
    public string $name;
    public string $value;

    public function __construct($label, $name, $value = null)
    {
        $this->label = $label;
        $this->name = $name;
        $this->value = $value != null ? $value : "";
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.inputs.email');
    }
}


/* ===== View\Components\Inputs\ImageLink.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class ImageLink extends Component
{
    public string $label;
    public string $name;
    public string $value;

    public function __construct($label, $name, $value = null)
    {
        $this->label = $label;
        $this->name = $name;
        $this->value = $value != null ? $value : "";
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.inputs.image-link');
    }
}


/* ===== View\Components\Inputs\ImageLinkArray.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class ImageLinkArray extends Component
{
    public string $label;
    public string $name;
    public $value;

    public function __construct($label, $name, $value = [])
    {
        $this->label = $label;
        $this->name = $name;
        $this->value = $value ?: [];
    }

    public function render(): View|Closure|string
    {
        return view('components.inputs.image-link-array');
    }
}


/* ===== View\Components\Inputs\Number.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class Number extends Component
{
    public string $label;
    public string $name;
    public string $value;

    public function __construct($label, $name, $value = null)
    {
        $this->label = $label;
        $this->name = $name;
        $this->value = $value != null ? $value : "";
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.inputs.number');
    }
}


/* ===== View\Components\Inputs\Price.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class Price extends Component
{
    public string $label;
    public string $name;
    public string $value;

    public function __construct($label, $name, $value = null)
    {
        $this->label = $label;
        $this->name = $name;
        $this->value = $value != null ? $value : "";
    }

    public function render(): View|Closure|string
    {
        return view('components.inputs.price');
    }
}


/* ===== View\Components\Inputs\Select.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class Select extends Component
{
    public string $label;
    public string $name;

    public function __construct($label, $name)
    {
        $this->label = $label;
        $this->name = $name;
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.inputs.select');
    }
}


/* ===== View\Components\Inputs\SelectMultiple.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class SelectMultiple extends Component
{
    public string $label;
    public string $name;

    public function __construct($label, $name)
    {
        $this->label = $label;
        $this->name = $name;
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.inputs.select-multiple');
    }
}


/* ===== View\Components\Inputs\SelectSimple.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class SelectSimple extends Component
{
    public string $label;
    public string $name;
    public string $value;

    public function __construct($label, $name, $value = null)
    {
        $this->label = $label;
        $this->name = $name;
        $this->value = $value != null ? $value : "";
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.inputs.select-simple');
    }
}


/* ===== View\Components\Inputs\Text.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class Text extends Component
{
    public string $label;
    public string $name;
    public string $value;

    public function __construct($label, $name, $value = null)
    {
        $this->label = $label;
        $this->name = $name;
        $this->value = $value != null ? $value : "";
    }

    public function render(): View|Closure|string
    {
        return view('components.inputs.text');
    }
}


/* ===== View\Components\Inputs\TextArea.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class TextArea extends Component
{
    public string $label;
    public string $name;
    public string $value;

    public function __construct($label, $name, $value = null)
    {
        $this->label = $label;
        $this->name = $name;
        $this->value = $value != null ? $value : "";
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.inputs.text-area');
    }
}


/* ===== View\Components\Inputs\TextAreaArray.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class TextAreaArray extends Component
{
    public string $label;
    public string $name;
    public $value;

    public function __construct($label, $name, $value = [])
    {
        $this->label = $label;
        $this->name = $name;
        $this->value = $value ?: [];
    }

    public function render(): View|Closure|string
    {
        return view('components.inputs.text-area-array');
    }
}


/* ===== View\Components\Inputs\TextArray.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class TextArray extends Component
{
    public string $label;
    public string $name;
    public $value;

    public function __construct($label, $name, $value = [])
    {
        $this->label = $label;
        $this->name = $name;
        $this->value = $value ?: [];
    }

    public function render(): View|Closure|string
    {
        return view('components.inputs.text-array');
    }
}


/* ===== View\Components\Inputs\Time.php ===== */
<?php

namespace App\View\Components\Inputs;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class Time extends Component
{
    public string $label;
    public string $name;
    public string $value;

    public function __construct($label, $name, $value = null)
    {
        $this->label = $label;
        $this->name = $name;
        $this->value = $value != null ? $value : "";
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.inputs.time');
    }
}


/* ===== View\Components\Menus\MenuBar.php ===== */
<?php

namespace App\View\Components\Menus;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class MenuBar extends Component
{
    public string $icon;
    public string $name;
    public string $route;

    /**
     * Create a new component instance.
     */
    public function __construct($icon, $name, $route)
    {
        $this->icon = $icon;
        $this->name = $name;
        $this->route = $route;
    }


    public function render(): View|Closure|string
    {
        return view('components.menus.menu-bar');
    }
}


/* ===== View\Components\Menus\MenuItem.php ===== */
<?php

namespace App\View\Components\Menus;

use Closure;
use Illuminate\Contracts\View\View;
use Illuminate\View\Component;

class MenuItem extends Component
{
    public string $name;
    public string $route;

    /**
     * Create a new component instance.
     */
    public function __construct($name, $route)
    {
        $this->name = $name;
        $this->route = $route;
    }

    /**
     * Get the view / contents that represent the component.
     */
    public function render(): View|Closure|string
    {
        return view('components.menus.menu-item');
    }
}



/* ===== IGNORED FILES & DIRECTORIES ===== */
/* The following items were excluded based on ignore rules */

/* Ignored items list: */
/* Ignored directories: */
/*   .codebase/ */
